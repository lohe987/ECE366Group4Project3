# program 2 BMC
# ed 

00001111 # r1 = 7
01000111 # r1 = 7 + 3 = 10
10110001 # r2 = 10 + 10
10110010 # r2 = r2 + r2 = 40
10110010 # r2 = r2 + r2 = 80
00111001 # r2 = r2 + 10 = 90
00111001 # r2 = r2 + 10 = 100
00001111 # r1 = 7
11001001 # r1 = 8
00111001 # r2 = r2 + 8 = 108
00001111 # r1 = 7
10101001 # mem[r1] = mem[7] = 108

10001011 # r1 = 3
10011001 # r2 = mem[3] = T
00001111 # r1 = 7
11000101 # r1 = 7 + 1 = 8
00000110 # mem[6] will be our ptr
00100100 # mem[6] <=  8
UNKNOWN	
00011101 # r3 = mem[8] = Pattern_Arr
01110111 # find score r3 and str in r3
00001100 # r1 = 4
00010001 # r0 = mem[4] = S (highest score)
01111110 # if new scr == S, go to equal
00001001 # redundant instr to allow jump same imm
00001001 # redundant
01010011 # if new scr > S, r0 = 1
00001001 # r1 = 1
11101110 # go to new if new scr > S
# else, we go to next pattern
UNKNOWN
00000110 # r0 = 6
00010100 # r1 = mem[6] (array ptr)
11000101 # array ptr++ / go to next entry
00100100 # mem[6] <= array ptr
10000111
10010000 # r0 = mem[7] = 108
11101110 # if array ptr = 108, done!
01100101 # else, go to loop
UNKNOWN
10001011 # redundant instr to allow make jump same imm
11100001 # intermediate jump

UNKNOWN  		
00000101 # r0 = 5
00010100 # r0 = mem[5] = C
11000101 # r1++ (count++)
00100100 # mem[5] = r1
UNKNOWN
01100011 # intermediate jump

UNKNOWN
00001100 # r1 = 4 
00101101 # mem[4] <= r3 (new score)
10001101 # r1 = 5
10000001 # r0 = 1
00100001 # mem[5] <= 1 (reset count to 1)
01100011 # intermediate jump

UNKNOWN
00000000 # adjust jump distance
11110000 # pc not changing
